# download and extraction target dir
#base-dir= moved to $extraction-framework/core/src/main/resources/universal.properties

# Source file. If source file name ends with .gz or .bz2, it is unzipped on the fly.
# Must exist in the directory xxwiki/yyyymmdd and have the prefix xxwiki-yyyymmdd-
# where xx is the wiki code and yyyymmdd is the dump date.

# default:
#source=# moved to $extraction-framework/core/src/main/resources/universal.properties

# use only directories that contain a 'download-complete' file? Default is false.
require-download-complete=true

# List of languages or article count ranges, e.g. 'en,de,fr' or '10000-20000' or '10000-', or '@mappings'
languages=hi

# extractor class names starting with "." are prefixed by "org.dbpedia.extraction.mappings"

extractors=.MappingExtractor,.RedirectExtractor
#,.NifExtractor
extractors.hi=.HomepageExtractor,.DisambiguationExtractor,.TopicalConceptsExtractor,.ImageExtractorNew,.AnchorTextExtractor,.CommonsResourceExtractor,.PlainAbstractExtractor
# .PersondataExtractor

uri-policy.iri=generic:en; xml-safe-predicates:*
format.ttl.bz2=turtle-triples;uri-policy.iri
mwc-apiUrl=https://{{LANG}}.wikipedia.org/w/api.php
mwc-maxRetries=5
mwc-connectMs=4000
mwc-readMs=30000
mwc-sleepFactor=2000
#parameters specific for the abstract extraction
abstract-query=&format=xml&action=query&prop=extracts&exintro=&explaintext=&titles=%s
# the tag path of the XML tags under which the result is expected
abstract-tags=api,query,pages,page,extract
# the properties used to specify long- and short abstracts (should not change)
short-abstracts-property=rdfs:comment
long-abstracts-property=abstract
# the short abstract is at least this long
short-abstract-min-length=200

#parameters specific to the nif extraction

#only extract abstract (not the whole page)
nif-extract-abstract-only=true
#the request query string
nif-query=&format=xml&action=parse&prop=text&page=%s&pageid=%d
#the xml path of the response
nif-tags=api,parse,text
# will leave out the long and short abstract datasets
nif-isTestRun=false
# will write all anchor texts for each nif instance
nif-write-anchor=true
# write only the anchor text for link instances
nif-write-link-anchor=true

#extractors.ar=.MappingExtractor,.TopicalConceptsExtractor
#
#extractors.be=.MappingExtractor
#
#extractors.bg=.MappingExtractor
#
#extractors.bn=.MappingExtractor
#
#extractors.ca=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.TopicalConceptsExtractor
#
#extractors.ced=.MappingExtractor
#
#extractors.commons=.MappingExtractor,.ContributorExtractor,.TemplateParameterExtractor,.FileTypeExtractor,.GalleryExtractor,.ImageAnnotationExtractor,.CommonsKMLExtractor,.DBpediaResourceExtractor
#
#extractors.cs=.MappingExtractor
#
#extractors.cy=.MappingExtractor
#
#extractors.da=.MappingExtractor
#
#extractors.de=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.PersondataExtractor,.PndExtractor,.CommonsResourceExtractor
#
#extractors.el=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.TopicalConceptsExtractor
#
#extractors.en=.MappingExtractor,.CitationExtractor,.DisambiguationExtractor,.GenderExtractor,.HomepageExtractor,.ImageExtractorNew,.PersondataExtractor,.PndExtractor,.TopicalConceptsExtractor,.AnchorTextExtractor,.CommonsResourceExtractor
#
#extractors.eo=.MappingExtractor
#
#extractors.es=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.TopicalConceptsExtractor,.CommonsResourceExtractor
#
#extractors.et=.MappingExtractor
#
#extractors.eu=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.TopicalConceptsExtractor
#
#extractors.fa=.MappingExtractor
#
#extractors.fi=.MappingExtractor
#
#extractors.fr=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.PndExtractor,.TopicalConceptsExtractor,.fr.PopulationExtractor,.CommonsResourceExtractor
#
#extractors.ga=.MappingExtractor,.HomepageExtractor
#
#extractors.gl=.MappingExtractor
#
#extractors.hi=.MappingExtractor
#
#extractors.hr=.MappingExtractor
#
#extractors.hu=.MappingExtractor
#
#extractors.id=.MappingExtractor
#
#extractors.it=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.TopicalConceptsExtractor
#
#extractors.ja=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.TopicalConceptsExtractor,.CommonsResourceExtractor
#
#extractors.ko=.MappingExtractor,.DisambiguationExtractor
#
#extractors.lt=.MappingExtractor
#
#extractors.lv=.MappingExtractor
#
#extractors.nl=.MappingExtractor,.DisambiguationExtractor,.ImageExtractorNew,.CommonsResourceExtractor
#
#extractors.mk=.MappingExtractor
#
#extractors.mt=.MappingExtractor
#
#extractors.pl=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew
#
#extractors.pt=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.TopicalConceptsExtractor,.CommonsResourceExtractor
#
#extractors.ru=.MappingExtractor,.DisambiguationExtractor,.HomepageExtractor,.ImageExtractorNew,.TopicalConceptsExtractor
#
#extractors.sk=.MappingExtractor
#
#extractors.sl=.MappingExtractor
#
#extractors.sr=.MappingExtractor
#
#extractors.tr=.MappingExtractor
#
#extractors.ur=.MappingExtractor
#
#extractors.vi=.MappingExtractor
#
#extractors.war=.MappingExtractor

#only the raw extractor here: all other wikidata extractors are executed in an separate extraction for wikidata (see: extraction.wikidata.properties)
#extractors.wikidata=.WikidataSameAsExtractor,.WikidataRawExtractor

#extractors.zh=.MappingExtractor

# If we need to Exclude Non-Free Images in this Extraction, set this to true
copyrightCheck=false
